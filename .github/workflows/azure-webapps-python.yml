# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/azure/app-service/quickstart-python?tabs=bash&pivots=python-framework-flask
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for PYTHON_VERSION.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy Python app to Azure Web App

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: smart-email-backend    # set this to your application's name
  WORKING_DIRECTORY: 'new_backend'          # set this to the directory with your code
  PYTHON_VERSION: '3.9'                     # set this to the Python version to use

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Verify directory structure
        run: |
          pwd
          ls -la
          echo "Working directory: ${{ env.WORKING_DIRECTORY }}"
          ls -la ${{ env.WORKING_DIRECTORY }}
          cat ${{ env.WORKING_DIRECTORY }}/requirements.txt
      
      - name: Install dependencies
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          pwd
          ls -la
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          ls -la  # This will help us verify the files are present

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)
      
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: |
            ${{ env.WORKING_DIRECTORY }}/app
            ${{ env.WORKING_DIRECTORY }}/alembic
            ${{ env.WORKING_DIRECTORY }}/requirements.txt
            ${{ env.WORKING_DIRECTORY }}/startup.sh
            ${{ env.WORKING_DIRECTORY }}/gunicorn.conf.py
            ${{ env.WORKING_DIRECTORY }}/__init__.py
            ${{ env.WORKING_DIRECTORY }}/db.env
  
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app
          
      - name: Make startup script executable
        run: |
          cd ${{ env.WORKING_DIRECTORY }}
          chmod +x startup.sh
          
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
